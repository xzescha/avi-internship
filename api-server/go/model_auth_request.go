// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * API Avito shop
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

package openapi

import (
	"context"
	"errors"
)

type AuthRequest struct {

	// Имя пользователя для аутентификации.
	Username string `json:"username"`

	// Пароль для аутентификации.
	Password string `json:"password"`
}


func AssertAuthRequestRequired(obj AuthRequest) error {
	if obj.Username == "" || obj.Password == "" {
		return errors.New("username and password cannot be empty")
	}
	return nil
}

// AuthenticateUser проверяет учетные данные пользователя в БД и возвращает JWT-токен.
func AuthenticateUser(authReq AuthRequest) (*AuthResponse, error) {
	if authReq.Username == "" || authReq.Password == "" {
		return nil, errors.New("username and password are required")
	}

	// Поиск пользователя в базе данных.
	var storedPassword string
	err := GetDB().QueryRow(context.Background(),
		"SELECT password FROM users WHERE username=$1", authReq.Username).Scan(&storedPassword)
	if err != nil {
		return nil, errors.New("invalid credentials_boo")
	}

	// TODO: bcrypt для сравнения захешированных паролей.
	if authReq.Password != storedPassword {
		return nil, errors.New("invalid credentials")
	}

	token, err := GenerateJWT(authReq.Username)
	if err != nil {
		return nil, err
	}

	return &AuthResponse{Token: token}, nil
}

// AssertAuthRequestConstraints checks if the values respects the defined constraints
func AssertAuthRequestConstraints(obj AuthRequest) error {
	return nil
}
