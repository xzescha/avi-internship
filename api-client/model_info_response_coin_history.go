/*
API Avito shop

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the InfoResponseCoinHistory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfoResponseCoinHistory{}

// InfoResponseCoinHistory struct for InfoResponseCoinHistory
type InfoResponseCoinHistory struct {
	Received []InfoResponseCoinHistoryReceivedInner `json:"received,omitempty"`
	Sent []InfoResponseCoinHistorySentInner `json:"sent,omitempty"`
}

// NewInfoResponseCoinHistory instantiates a new InfoResponseCoinHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfoResponseCoinHistory() *InfoResponseCoinHistory {
	this := InfoResponseCoinHistory{}
	return &this
}

// NewInfoResponseCoinHistoryWithDefaults instantiates a new InfoResponseCoinHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfoResponseCoinHistoryWithDefaults() *InfoResponseCoinHistory {
	this := InfoResponseCoinHistory{}
	return &this
}

// GetReceived returns the Received field value if set, zero value otherwise.
func (o *InfoResponseCoinHistory) GetReceived() []InfoResponseCoinHistoryReceivedInner {
	if o == nil || IsNil(o.Received) {
		var ret []InfoResponseCoinHistoryReceivedInner
		return ret
	}
	return o.Received
}

// GetReceivedOk returns a tuple with the Received field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoResponseCoinHistory) GetReceivedOk() ([]InfoResponseCoinHistoryReceivedInner, bool) {
	if o == nil || IsNil(o.Received) {
		return nil, false
	}
	return o.Received, true
}

// HasReceived returns a boolean if a field has been set.
func (o *InfoResponseCoinHistory) HasReceived() bool {
	if o != nil && !IsNil(o.Received) {
		return true
	}

	return false
}

// SetReceived gets a reference to the given []InfoResponseCoinHistoryReceivedInner and assigns it to the Received field.
func (o *InfoResponseCoinHistory) SetReceived(v []InfoResponseCoinHistoryReceivedInner) {
	o.Received = v
}

// GetSent returns the Sent field value if set, zero value otherwise.
func (o *InfoResponseCoinHistory) GetSent() []InfoResponseCoinHistorySentInner {
	if o == nil || IsNil(o.Sent) {
		var ret []InfoResponseCoinHistorySentInner
		return ret
	}
	return o.Sent
}

// GetSentOk returns a tuple with the Sent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoResponseCoinHistory) GetSentOk() ([]InfoResponseCoinHistorySentInner, bool) {
	if o == nil || IsNil(o.Sent) {
		return nil, false
	}
	return o.Sent, true
}

// HasSent returns a boolean if a field has been set.
func (o *InfoResponseCoinHistory) HasSent() bool {
	if o != nil && !IsNil(o.Sent) {
		return true
	}

	return false
}

// SetSent gets a reference to the given []InfoResponseCoinHistorySentInner and assigns it to the Sent field.
func (o *InfoResponseCoinHistory) SetSent(v []InfoResponseCoinHistorySentInner) {
	o.Sent = v
}

func (o InfoResponseCoinHistory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfoResponseCoinHistory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Received) {
		toSerialize["received"] = o.Received
	}
	if !IsNil(o.Sent) {
		toSerialize["sent"] = o.Sent
	}
	return toSerialize, nil
}

type NullableInfoResponseCoinHistory struct {
	value *InfoResponseCoinHistory
	isSet bool
}

func (v NullableInfoResponseCoinHistory) Get() *InfoResponseCoinHistory {
	return v.value
}

func (v *NullableInfoResponseCoinHistory) Set(val *InfoResponseCoinHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableInfoResponseCoinHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableInfoResponseCoinHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfoResponseCoinHistory(val *InfoResponseCoinHistory) *NullableInfoResponseCoinHistory {
	return &NullableInfoResponseCoinHistory{value: val, isSet: true}
}

func (v NullableInfoResponseCoinHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfoResponseCoinHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


