/*
API Avito shop

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the InfoResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfoResponse{}

// InfoResponse struct for InfoResponse
type InfoResponse struct {
	// Количество доступных монет.
	Coins *int32 `json:"coins,omitempty"`
	Inventory []InfoResponseInventoryInner `json:"inventory,omitempty"`
	CoinHistory *InfoResponseCoinHistory `json:"coinHistory,omitempty"`
}

// NewInfoResponse instantiates a new InfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfoResponse() *InfoResponse {
	this := InfoResponse{}
	return &this
}

// NewInfoResponseWithDefaults instantiates a new InfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfoResponseWithDefaults() *InfoResponse {
	this := InfoResponse{}
	return &this
}

// GetCoins returns the Coins field value if set, zero value otherwise.
func (o *InfoResponse) GetCoins() int32 {
	if o == nil || IsNil(o.Coins) {
		var ret int32
		return ret
	}
	return *o.Coins
}

// GetCoinsOk returns a tuple with the Coins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoResponse) GetCoinsOk() (*int32, bool) {
	if o == nil || IsNil(o.Coins) {
		return nil, false
	}
	return o.Coins, true
}

// HasCoins returns a boolean if a field has been set.
func (o *InfoResponse) HasCoins() bool {
	if o != nil && !IsNil(o.Coins) {
		return true
	}

	return false
}

// SetCoins gets a reference to the given int32 and assigns it to the Coins field.
func (o *InfoResponse) SetCoins(v int32) {
	o.Coins = &v
}

// GetInventory returns the Inventory field value if set, zero value otherwise.
func (o *InfoResponse) GetInventory() []InfoResponseInventoryInner {
	if o == nil || IsNil(o.Inventory) {
		var ret []InfoResponseInventoryInner
		return ret
	}
	return o.Inventory
}

// GetInventoryOk returns a tuple with the Inventory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoResponse) GetInventoryOk() ([]InfoResponseInventoryInner, bool) {
	if o == nil || IsNil(o.Inventory) {
		return nil, false
	}
	return o.Inventory, true
}

// HasInventory returns a boolean if a field has been set.
func (o *InfoResponse) HasInventory() bool {
	if o != nil && !IsNil(o.Inventory) {
		return true
	}

	return false
}

// SetInventory gets a reference to the given []InfoResponseInventoryInner and assigns it to the Inventory field.
func (o *InfoResponse) SetInventory(v []InfoResponseInventoryInner) {
	o.Inventory = v
}

// GetCoinHistory returns the CoinHistory field value if set, zero value otherwise.
func (o *InfoResponse) GetCoinHistory() InfoResponseCoinHistory {
	if o == nil || IsNil(o.CoinHistory) {
		var ret InfoResponseCoinHistory
		return ret
	}
	return *o.CoinHistory
}

// GetCoinHistoryOk returns a tuple with the CoinHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoResponse) GetCoinHistoryOk() (*InfoResponseCoinHistory, bool) {
	if o == nil || IsNil(o.CoinHistory) {
		return nil, false
	}
	return o.CoinHistory, true
}

// HasCoinHistory returns a boolean if a field has been set.
func (o *InfoResponse) HasCoinHistory() bool {
	if o != nil && !IsNil(o.CoinHistory) {
		return true
	}

	return false
}

// SetCoinHistory gets a reference to the given InfoResponseCoinHistory and assigns it to the CoinHistory field.
func (o *InfoResponse) SetCoinHistory(v InfoResponseCoinHistory) {
	o.CoinHistory = &v
}

func (o InfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfoResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Coins) {
		toSerialize["coins"] = o.Coins
	}
	if !IsNil(o.Inventory) {
		toSerialize["inventory"] = o.Inventory
	}
	if !IsNil(o.CoinHistory) {
		toSerialize["coinHistory"] = o.CoinHistory
	}
	return toSerialize, nil
}

type NullableInfoResponse struct {
	value *InfoResponse
	isSet bool
}

func (v NullableInfoResponse) Get() *InfoResponse {
	return v.value
}

func (v *NullableInfoResponse) Set(val *InfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfoResponse(val *InfoResponse) *NullableInfoResponse {
	return &NullableInfoResponse{value: val, isSet: true}
}

func (v NullableInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


