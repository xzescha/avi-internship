/*
API Avito shop

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SendCoinRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendCoinRequest{}

// SendCoinRequest struct for SendCoinRequest
type SendCoinRequest struct {
	// Имя пользователя, которому нужно отправить монеты.
	ToUser string `json:"toUser"`
	// Количество монет, которые необходимо отправить.
	Amount int32 `json:"amount"`
}

type _SendCoinRequest SendCoinRequest

// NewSendCoinRequest instantiates a new SendCoinRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendCoinRequest(toUser string, amount int32) *SendCoinRequest {
	this := SendCoinRequest{}
	this.ToUser = toUser
	this.Amount = amount
	return &this
}

// NewSendCoinRequestWithDefaults instantiates a new SendCoinRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendCoinRequestWithDefaults() *SendCoinRequest {
	this := SendCoinRequest{}
	return &this
}

// GetToUser returns the ToUser field value
func (o *SendCoinRequest) GetToUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToUser
}

// GetToUserOk returns a tuple with the ToUser field value
// and a boolean to check if the value has been set.
func (o *SendCoinRequest) GetToUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToUser, true
}

// SetToUser sets field value
func (o *SendCoinRequest) SetToUser(v string) {
	o.ToUser = v
}

// GetAmount returns the Amount field value
func (o *SendCoinRequest) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *SendCoinRequest) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *SendCoinRequest) SetAmount(v int32) {
	o.Amount = v
}

func (o SendCoinRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendCoinRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["toUser"] = o.ToUser
	toSerialize["amount"] = o.Amount
	return toSerialize, nil
}

func (o *SendCoinRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"toUser",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSendCoinRequest := _SendCoinRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSendCoinRequest)

	if err != nil {
		return err
	}

	*o = SendCoinRequest(varSendCoinRequest)

	return err
}

type NullableSendCoinRequest struct {
	value *SendCoinRequest
	isSet bool
}

func (v NullableSendCoinRequest) Get() *SendCoinRequest {
	return v.value
}

func (v *NullableSendCoinRequest) Set(val *SendCoinRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSendCoinRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSendCoinRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendCoinRequest(val *SendCoinRequest) *NullableSendCoinRequest {
	return &NullableSendCoinRequest{value: val, isSet: true}
}

func (v NullableSendCoinRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendCoinRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


