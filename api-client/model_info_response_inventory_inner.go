/*
API Avito shop

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the InfoResponseInventoryInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfoResponseInventoryInner{}

// InfoResponseInventoryInner struct for InfoResponseInventoryInner
type InfoResponseInventoryInner struct {
	// Тип предмета.
	Type *string `json:"type,omitempty"`
	// Количество предметов.
	Quantity *int32 `json:"quantity,omitempty"`
}

// NewInfoResponseInventoryInner instantiates a new InfoResponseInventoryInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfoResponseInventoryInner() *InfoResponseInventoryInner {
	this := InfoResponseInventoryInner{}
	return &this
}

// NewInfoResponseInventoryInnerWithDefaults instantiates a new InfoResponseInventoryInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfoResponseInventoryInnerWithDefaults() *InfoResponseInventoryInner {
	this := InfoResponseInventoryInner{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *InfoResponseInventoryInner) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoResponseInventoryInner) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *InfoResponseInventoryInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *InfoResponseInventoryInner) SetType(v string) {
	o.Type = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *InfoResponseInventoryInner) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoResponseInventoryInner) GetQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *InfoResponseInventoryInner) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *InfoResponseInventoryInner) SetQuantity(v int32) {
	o.Quantity = &v
}

func (o InfoResponseInventoryInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfoResponseInventoryInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	return toSerialize, nil
}

type NullableInfoResponseInventoryInner struct {
	value *InfoResponseInventoryInner
	isSet bool
}

func (v NullableInfoResponseInventoryInner) Get() *InfoResponseInventoryInner {
	return v.value
}

func (v *NullableInfoResponseInventoryInner) Set(val *InfoResponseInventoryInner) {
	v.value = val
	v.isSet = true
}

func (v NullableInfoResponseInventoryInner) IsSet() bool {
	return v.isSet
}

func (v *NullableInfoResponseInventoryInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfoResponseInventoryInner(val *InfoResponseInventoryInner) *NullableInfoResponseInventoryInner {
	return &NullableInfoResponseInventoryInner{value: val, isSet: true}
}

func (v NullableInfoResponseInventoryInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfoResponseInventoryInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


